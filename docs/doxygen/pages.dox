/**
@mainpage Overview
@brief The 1NCE IoT SDK for Embedded C provides demonstration code for different functionality of 1NCE Connectivity Suite.

> 1NCE IoT SDK allow customers a seamless setup and use of all features as part of 1NCE Connectivity Suite.

@section features Features
The following services are part of this SDK:
- [Use 1NCE Data Broker] - [Data Broker](https://help.1nce.com/dev-hub/docs/connectivity-suite-data-broker)
- [SIM as an Identity] - [SIM-as-Identity](https://help.1nce.com/dev-hub/docs/connectivity-suite-sim-identity)
- [Translation Service] - [Translation Service](https://help.1nce.com/dev-hub/docs/connectivity-suite-translation-service)

@image html overview.png 1NCE IoT C SDK Overview width=50%

@section MQTT_onboarding MQTT Onboarding
The connection to AWS IoT core is mainly done through MQTT, and Devices are
created as "Things" that can have various attributes to define their functionality.
After creating a representation of the “thing” in AWS IoT Core, a certificate, private key,
and public key are generated for the device to enable secure communication to the cloud.
In addition, policy configuration is needed to determine what are the permissions granted for the device. 
In MQTT context, this can for example determine the topics that the device can Publish and/or Subscribe to.
@image html mqtt_onboarding.png MQTT Device Onboarding Flow width=50%
@section coap_onboarding CoAP Onboarding
The 1NCE IoT c SDK also provides onboarding credentials for IoT devices communicating
through DTLS. In this case the device receives a DTLS Identity and a Pre-Shared Key (PSK) that can be used to establish secure connection
to the CoAP endpoint of 1NCE Data Broker
@image html coap_onboarding.png CoAP DTLS Onboarding Flow width=50%
@section translation_service Translation Service (Binary conversion language)
The translation service aims to minimize the payload size sent from the device to a simple byte array that can be converted to JSON Format.
The resulting message is then sent using MQTT via the Data broker.
Translating the byte array is done using Binary Conversion language which splits the array into a sequence of values defined in a translation template.
@image html translation_service.png translation service width=50%

*/
