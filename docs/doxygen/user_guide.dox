/**
 * @page Integration_Guide Integration Guide
 * @brief Guide for integration 1NCE IoT C SDK to a new platform.
 * <p>
 * You can also develop C Application using the SDK to connect with AWS with zero touch provisioning, use Energy Saver and other features offered by 1NCE OS.
 * @section Getting_started Getting started
 * @brief This page shows you:
 * <ul>
 * <li>How to get the identity and pre-shared key using 1NCE OS Authentication Service. (for CoAP application).</li>
 * <li>How to use 1NCE OS energy saver to save the energy.</li>
 * </ul>  
 *
 *
 * @section scenario The scenario
 * @brief The Example sows how to set up and integrate 1nce SDK in Embedded Application written in C.
 *
 * The Examples used FreeRTOS in the first version.
 * </p>
 *
 *
 * @section Prerequisite Prerequisite Tasks
 * @brief To set up and run the SDK you must first complete these tasks:
 *
 * <p>
 * <ul>
 * <li>Install gcc to compile the project. For more information, see the <a href="https://gcc.gnu.org/install/index.html">link</a> </li>
 * </ul>
 * </p>
 *
 * @section Contents
 * @brief The steps is follow:
 *
 * <p>
 * <ul>
 * <li>Step1: Clone Repository.</li>
 * <li>Step2: Implement abstract functions</li>
 * <li>Step3: Integrate SDK in your Application</li>
 * <li>Step4: Run your Application</li>
 * </ul>  
 * </p>
 *
 * @section Step1 Step1: Clone Repository
 * @brief you clone the SDK for Embedded C in your project using git clone To clone using HTTPS
 * @code{command}
    git clone https://github.com/1NCE-GmbH/1nce-iot-c-sdk.git --recurse-submodules
 * @endcode 
 * 
 * 
 * <p>
 * with SSH
 * </p>
 * @code{command}
    git clone git@github.com:1NCE-GmbH/1nce-iot-c-sdk.git --recurse-submodules
 * @endcode 
 * 
 * <p>
 * If you have downloaded the repo without using the --recurse-submodules argument, you need to run:
 * </p>
  * @code{command}
    git submodule update --init --recursive
 * @endcode 
 *
 * @section step2 Step2: Implement abstract functions
 * @brief You need to implement your four tls functions how you want to access to
 * our end point onload or offload and also depending on your modem.
 * 
 * <p>
 * <ul>
 * <li>nce_os_tls_connect.</li>
 * <li>nce_os_tls_send</li>
 * <li>nce_os_tls_recv</li>
 * <li>nce_os_tls_disconnect</li>
 * </ul>  
 * To implement your functions, we recommend to follow the example.
 * </p>
 * 
 * <p>
 * For the Implementation we use the pseudo code:
 * @code{c}
    int tls_connect_impl(OSNetwork_t osnetwork,OSEndPoint_t nce_oboarding)
 * @endcode 
 * <ol>
 * <li>Configure the onboarding Socket <a href="https://github.com/1NCE-GmbH/blueprint-freertos/blob/94b2f0a364c958df57fe75e969aeef674fece6ba/libraries/3rdparty/NCE_SDK/nce_bg96_configuration.c#L41">example</a>.</li>
 * <li>Create TCP Socket.</li>
 * <li>Connect the socket with the endpoint.</li>
 * </ol>
 * </p>
 * @code{c}
    int32_t tls_send_impl(OSNetwork_t osnetwork,
                          void *pBuffer,
                          size_t bytesToSend)
 * @endcode 
 * <p> Create send via TLS for Quectel BG96 we can call At command AT+QSSLSEND </p>
 * @code{c}
    int32_t tls_recv_impl(OSNetwork_t osnetwork,
                          void *pBuffer,
                          size_t bytesToRecv)
 * @endcode
 * <p> Create Recv function via TLS for Quectel BG96 we can call At command AT+QSSLRECV </p>
  * @code{c}
    int tls_disconnect_impl(OSNetwork_t osnetwork)
 * @endcode
 * <ol>
 * <li>Call socket shutdown function to close the connection.</li>
 * </ol>
 *
 * @section step3 Step3: Integrate SDK in your Application
 * @brief 1NCE SDK is simple to integrate in every Embedded App written with C, To begin, you need to define an object type OSNetwork_t and the affect to their variable the network socket and implemented functions as shown in the example bellow.
 * @code{c}
   OSNetwork_t xOSNetwork= { 0 };
   os_network_ops_t osNetwork={
      .os_socket=&xOSNetwork,
		.nce_os_tls_connect=tls_connect_impl,
		.nce_os_tls_send=tls_send_impl,
		.nce_os_tls_recv=tls_recv_impl,
      .nce_os_tls_disconnect=tls_disconnect_impl};
 * @endcode
 * to have PSK you can call os_auth and you have an object DtlsKey_t which store the PSK and pskIdentity
 * </p>
 * @code{c}
static int prvInitializeClientCredential( TLSContext_t * pxCtx )
{
	DEVICE_ONBOARDED=false;
    DtlsKey_t nceKey={0};
    int result=	os_auth(&osNetwork,&nceKey);
    BaseType_t xResult = CKR_OK;
    /* Attach the client PSK the DTLS configuration. */
    if( 0 == xResult )
    {
        /*Use PSK */

        size_t psk_len  = strlen(nceKey.Psk);
		size_t psk_identity_len  = strlen(nceKey.PskIdentity);

        xResult = mbedtls_ssl_conf_psk( &pxCtx->xMbedSslConfig,
                &(nceKey.Psk),strlen(nceKey.Psk),&(nceKey.PskIdentity),psk_identity_len);

    }
    DEVICE_ONBOARDED=true;
    return xResult;
}
 * @endcode
 * <p>Complete the following  macros  in log_interface.h </p> 
 * @code{c}
  #define NceOSLogInfo( format, ... ) 
  #define NceOSLogDebug( format, ... ) 
  #define NceOSLogError( format, ... ) 
  #define NceOSLogWarn( format, ... )
 *
 * @endcode
 * <p>If you are using FreeRTOS you can just use the macro  </p>
 * @code{c}
  #define FREERTOS
 * @endcode
 * @section step4 Step4: Run your Application
 *
 * Run your code in ISO C90
 *
 */
